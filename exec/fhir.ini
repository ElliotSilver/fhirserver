; fhir ini file, and documentation
[databases]
; this section contains a series of entries that define the databases that the server connects to 
; each database has a name - used below in this ini file, and a series of details about the 
; database

; [type] = mssql, mysql, or sqlite. Versions: either MSSQL 2012+ or MySQL 5.5+ is required. 
; [odbc-driver-name] - optional odbc driver to use. If this is not specified, the server will guess at the driver name (mssql/mysql)
; [address]: the address of the server. Not used for sqlite
; [database]: the name of the database on the server, or, for sqlite, the file name to use as the database
; [username/password]: required for mysql, optional for mssql (if not using windows authentication), not used for sqlite

[terminologies]
; a list of external terminologies to load. At least UCUM must be present
; each entry has a name (only used here and in the server log), a type, and either a source or a database:

; the following types are known:
;  icd10 - source = file icd10.txt (to be documented)
;  snomed - source = file (prepared by manager)
;  loinc - source = file (in install, or prepared by manager)
;  ucum - source = ucum essence file
;  rxnorm - database = database prepared by manager (can co-exist with endpoint, see below)
;  ncimeta - database = database prepared by manager (can co-exist with endpoint, see below)
;  unii  - database = database prepared by manager (can co-exist with endpoint, see below)
;  lang - source = file as installed by installer
; 
; note that you can load multiple versions of the same terminology, as long as they have different versions. List the most recent version last

[endpoints]
; a list of end-points to host. An end point is a particular FHIR RESTful service with a designated version 
; you must have at least one entry, and can have any number of end-points. Each end point has an associated
; database (end points cannot share databases), a version, and a path. 
; each endpoint has a name (only used here and in the server log), a path, a version, and a database:

; [path]: e.g. /r3 
; [version]: one of r2, r3, r4
; [name] - the name of a database from the database section
; [validate] - whether to validate incoming resources

[web]
; host= the name this server thinks that clients refer to it as (used when a client advised host name is not available)
; if you are using OAuth, this is used in the official redirection URL that OAuth servers require
; if you are using SSL, this should match the FQDN in the certificate
host=

; http= the port to serve http on. if not defined, the server will not serve http
http=

; https=the port to serve https on. if not defined, the server will not serve https. If set, you also need to provide certificate details
https=

; SSL certificate details - use openSSL to generate the certificate. You can use a self-signed certificate, but most browsers require
; you to have a signed certificate. Consult Google for further information.
;
; certname= the file name of the certificate
; cacertname= the file name of the certificate for the CA (public key)
; password= the passphrase for the private key, which has the same name as certname, but with a .key extension
certname=
cacertname=
password=

; whether to support Smart app launch specification on ssl 
oauth=true

; google id for tracking hits
googleid=
; security/authentication/OAuth configuration - see auth.ini
; you need this if you are using OAuth
clients=C:\work\fhirserver\Exec\auth.ini
folder=C:\work\fhirserver\web
; oauth=  turn on OAuth (Smart App Launch) support
; owin= turn on OWin support
; owin-http= (special case: turn on OWin for the non-secure interface)
; no-cert=  true if the server will still serve requests with no client certificate
; unknown-cert= true if the server will still serve unknown certificates
; no-jwt=  true if the server will still requests with no JWT
; unverified-jwt= true if the server will still serve unknown JWTs
;
; for unknown-cert and unverified-jwt, populate the [certificates] and [jwt] sections

[certificates]
; a list of accepted certificates. list the  X509v3 Subject Key Identifier: 
D6:63:35:99:D7:96:FC:97:5A:FD:F6:64:55:E8:63:BF:1B:BA:04:2A

; [jwts]
; a list of JWT authorities that are recognised. 
; each entry has form [iss]=[address] where 
;   iss is the identifed issuer in the JWT, and 
;    address is the location where JWKs for the issuer are found.

[admin]
; master administrator username for managing users through SCIM
username=

; email for SCIM admin (not used directly)
email=grahame@healthintersections.com.au

; sms to send notifications of start/stop to
owner-sms=

; owning organization to show on web page etc
ownername=Health Intersections

[scim]
; SCIM sub-system configuration
; salt=
; a random string (use a UUID) that the SCIM sub-system uses to 
; salt the hashed passwords. If you change this, all existing 
; SCIM passwords are invalidated. You must have some content 
; for this even if you don't use SCIM 
;
; the default rights to assign to anonymous users on the open/unsecured interface
default-rights=openid,profile,user/*.*


[snomed]
; where to load snomed from. see program instructions for how to import snomed
cache=

[loinc]
; where to load loinc from. see program instructions for how to import loinc
cache=

[rxnorm]
; which database to find and import rxnorm into
database=

[ucum]
; where to load ucum from. The file name for ucum-essence.xml from unitsofmeasure.org
source=

[admin]
; required. Master admin account for administering user accounts. 
; password is provided to database mount procedure (or install)
username=
email=

[email]
; server configuration for sending email subscriptions
;
; Host= (host name to send email to)
; Port= (post name for host)
; Username= (user name with rights to send email using nominated server as a relay)
; Password= (password for username)
; Sender= (email address of sender - often related to the username)
; secure= (0 or 1: whether to use TLS when sending. Server dictates what value to use here)

[sms]
; server configuration for sending sms subscriptions
; account details on Twilio, which is used to send SMS messages
; values as specified for the twilio account
;
; account=
; token=
; from=
; owner= if an owner is nominated, they'll be sms'ed when the server starts or stops 

[facebook.com]
; like=1  - if you want the like facebook like button to appear in the web interface
;app-id=  client id and client secret  as an OAuth client
;app-secret=  if you register the server with facebook

[google.com]
; client id, client secret, and api key if you register the server with google as an OAuth client
;app-id=
;app-secret=
;app-key=

